@page "/counter"
@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor
@using System.Timers
@using Timer = System.Threading.Timer
@using System.Collections.ObjectModel
@using System.Threading

@implements IDisposable;
@inject NavigationManager NavigationManager


<div class="col-lg-9 control-section sb-property-border">
    <div class="content-wrapper">
        <SfPivotView @ref="pv" TValue="ProductDetails" ShowFieldList="true" EnableVirtualization="true"> 
            <PivotViewDataSourceSettings DataSource="@Data" ExpandAll=false EnableSorting=true>
                <PivotViewColumns>
                    <PivotViewColumn Name="Country"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(ProductDetails.Amount)"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Year"></PivotViewRow>
                    <PivotViewRow Name="Order_Source" Caption="Order Source"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="Amount" Caption="Sales Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewDrilledMembers>
                    <PivotViewDrilledMember Name="Year" Items="@ProductDetails.Yrs"></PivotViewDrilledMember>
                </PivotViewDrilledMembers>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotViewDisplayOption View=View.Chart></PivotViewDisplayOption>
            <PivotChartSettings Title="Sales Analysis" Theme="@Theme">
                <PivotChartSeries Type="@ChartType"></PivotChartSeries>
                <PivotChartPrimaryYAxis>
                    <PivotChartPrimaryYAxisBorder Width="0"></PivotChartPrimaryYAxisBorder>
                </PivotChartPrimaryYAxis>
            </PivotChartSettings>
        </SfPivotView>
    </div>
</div>
<div class="col-lg-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header" style="padding-bottom:10px; font-size:16px">Properties</div>
        <div class="property-panel-content">
            <table id="property" style="width:100%" class="property-panel-table">
                <tbody>
                    <tr style="height: 50px">
                        <td style="padding-right: 10px;">
                            <div style="white-space: nowrap;">Chart Types: </div>
                        </td>
                        <td>
                            <div>
                                <SfDropDownList TValue="ChartSeriesType" TItem="DropDownData" DataSource="@ChartTypes" @bind-Value="@ChartType" PopupWidth="auto">
                                    <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<style>
    .e-pivotview {
        min-height: 200px;
    }

    html, body {
        height: 100%;
    }

    .property-panel-table td {
        width: auto;
    }

    .property-panel-table div {
        padding-left: unset;
    }
</style>
@code {

    public ChartSeriesType ChartType = ChartSeriesType.Bubble;
    public ObservableCollection<ProductDetails> Data { get; set; }
    private Theme Theme { get; set; }
    
    private SfPivotView<ProductDetails> pv;
    private bool registered;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.Data = PollingService.Instance.Observable;

        if (!registered)
        {
            PollingService.Instance.Register(GetHashCode(), UpdateData);
            registered = true;
        }
    }

    private void UpdateData()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    List<DropDownData> ChartTypes = new List<DropDownData>() {
        new DropDownData { Name = "Column", Value = ChartSeriesType.Column },
        new DropDownData { Name = "Bar", Value = ChartSeriesType.Bar },
        new DropDownData { Name = "Line", Value = ChartSeriesType.Line },
        new DropDownData { Name = "Spline", Value = ChartSeriesType.Spline },
        new DropDownData { Name = "Area", Value = ChartSeriesType.Area },
        new DropDownData { Name = "SplineArea", Value = ChartSeriesType.SplineArea },
        new DropDownData { Name = "StepLine", Value = ChartSeriesType.StepLine },
        new DropDownData { Name = "StepArea", Value = ChartSeriesType.StepArea },
        new DropDownData { Name = "StackingColumn", Value = ChartSeriesType.StackingColumn },
        new DropDownData { Name = "StackingBar", Value = ChartSeriesType.StackingBar },
        new DropDownData { Name = "StackingArea", Value = ChartSeriesType.StackingArea },
        new DropDownData { Name = "StackingColumn100", Value = ChartSeriesType.StackingColumn100 },
        new DropDownData { Name = "StackingBar100", Value = ChartSeriesType.StackingBar100 },
        new DropDownData { Name = "StackingArea100", Value = ChartSeriesType.StackingArea100 },
        new DropDownData { Name = "Scatter", Value = ChartSeriesType.Scatter },
        new DropDownData { Name = "Bubble", Value = ChartSeriesType.Bubble },
        new DropDownData { Name = "Polar", Value = ChartSeriesType.Polar },
        new DropDownData { Name = "Radar", Value = ChartSeriesType.Radar },
        new DropDownData { Name = "Pareto", Value = ChartSeriesType.Pareto },
        new DropDownData { Name = "Pie", Value = ChartSeriesType.Pie },
        new DropDownData { Name = "Doughnut", Value = ChartSeriesType.Doughnut },
        new DropDownData { Name = "Funnel", Value = ChartSeriesType.Funnel },
        new DropDownData { Name = "Pyramid", Value = ChartSeriesType.Pyramid }
    };

    public class DropDownData
    {
        public string Name { get; set; }
        public ChartSeriesType Value { get; set; }
    }

    public void Dispose()
    {
        PollingService.Instance.UnRegister(this.GetHashCode());
    }

}