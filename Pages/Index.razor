@page "/"

@using System.Threading
@using System.Collections.ObjectModel
@using System.Diagnostics
@using MyBlazorServerApp.Annotations

@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

<SfButton Content="Update" OnClick="() => UpdateData()"></SfButton>
<SfButton CssClass="e-flat" IsPrimary="true" IconCss="@IconCss" Content="@Content" IsToggle="true" @onclick="OnToggleClick" @ref="ToggleBtnObj"></SfButton>


@*The pivot table processes and summarizes raw data before 
displaying it in tabular format. 
In general, the more data takes longer time to process the aggregation
of the pivot table values. When we have a large number of unique row and column headers, 
we can improve performance by using the "Virtualization" option. If we have fewer unique headers with larger amount of data, 
it will take time to process, since virtualization works by slicing the large number of unique row and column headers alone.
As a result, to avoid this problem, you should increase the interval time. 
Please take the following steps to improve the performance of the pivot table.

https://www.syncfusion.com/forums/172612/how-to-update-pivot-table-with-source-data-refreshed?reply=S2POIQ

*@
<SfPivotView @ref="PivotTable" TValue="ProductDetails" Height="560" Width="1200" ShowGroupingBar="true" ShowFieldList="true" EnableVirtualization="true" AllowDeferLayoutUpdate="true">
    <PivotViewDataSourceSettings DataSource="@Data">
        <PivotViewColumns>
            <PivotViewColumn Name="Year"></PivotViewColumn>
            <PivotViewColumn Name="Quarter"></PivotViewColumn>
        </PivotViewColumns>
        <PivotViewRows>
            <PivotViewRow Name="Country"></PivotViewRow>
            @*<PivotViewRow Name="Product"></PivotViewRow>*@
        </PivotViewRows>
        <PivotViewValues>
            <PivotViewValue Name="Sold" Caption="Sold Units" Type="SummaryTypes.Sum"></PivotViewValue>
            <PivotViewValue Name="Amount" Caption="Total Amount" Type="SummaryTypes.Sum"></PivotViewValue>
        </PivotViewValues>
        <PivotViewFilters>
            <PivotViewFilter Name="Products"></PivotViewFilter>
        </PivotViewFilters>
        <PivotViewFormatSettings>
            <PivotViewFormatSetting Name="Amount" Format="C"></PivotViewFormatSetting>
        </PivotViewFormatSettings>
    </PivotViewDataSourceSettings>
</SfPivotView>

@code {
    SfButton ToggleBtnObj;
    public string IconCss = "e-icons e-pause";
    public string Content = "Pause";

    public ObservableCollection<ProductDetails> Data { get; set; }

    SfPivotView<ProductDetails> PivotTable { get; set; }

    private readonly object _syncRoot = new object();

    private static bool _paused;

    private bool registered;

    private Timer _timer;
    private int count;
    protected override async Task OnInitializedAsync()
    {
        // called twice! why ?
        Debug.WriteLine($"[{this.GetType().FullName} - {this.GetHashCode()}] Called {++count} time(s)");

        await base.OnInitializedAsync();
        this.Data = PollingService.Instance.Observable;

        if (!registered)
        {
            PollingService.Instance.UnRegisterAll();
            PollingService.Instance.Register(GetHashCode(), UpdateData);
            registered = true;
        }

        //_timer = new Timer(UpdateData, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    public void UpdateData()
    {
        InvokeAsync(() =>
        {
            //foreach (var d in Data)
            //{
            //    d.Random();
            //}
            //Data.RemoveAt(0);
            //Data.Add(ProductDetails.BuildOne(42));

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");
    }

    public void OnToggleClick()
    {
        lock (_syncRoot)
        {
            if (!_paused)
            {
                this.Content = "Play";
                this.IconCss = "e-icons e-play";
                PollingService.Instance.Pause();
                Debug.WriteLine("paused");
            }
            else
            {
                this.Content = "Pause";
                this.IconCss = "e-icons e-pause";
                PollingService.Instance.Resume();
                Debug.WriteLine("restarted");
            }

            _paused = !_paused;
            Debug.WriteLine($"new paused = {_paused}");
        }
    }

}

