@page "/"


@using System.Threading
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Diagnostics
@using System.Runtime.CompilerServices
@using MyBlazorServerApp.Annotations


@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons


<SfButton Content="Update" OnClick="update"></SfButton>

@*<SfGrid @ref="Grid" DataSource="@products" Height="300" Width="1000" EnableVirtualization="true" EnableColumnVirtualization="true">
    <GridColumns>
    @foreach (var prop in typeof(ProductDetails).GetProperties())
    {
    <GridColumn Field="@prop.Name" IsPrimaryKey="@(prop.Name == "Id")"  AllowEditing="true"></GridColumn>
    }
    </GridColumns>
    </SfGrid>*@

<SfPivotView TValue="ProductDetails" Height="560" Width="1200" ShowGroupingBar="true" ShowFieldList="true">
    <PivotViewDataSourceSettings DataSource="@products">
        <PivotViewColumns>
            <PivotViewColumn Name="Year"></PivotViewColumn>
            <PivotViewColumn Name="Quarter"></PivotViewColumn>
        </PivotViewColumns>
        <PivotViewRows>
            <PivotViewRow Name="Country"></PivotViewRow>
        </PivotViewRows>
        <PivotViewValues>
            <PivotViewValue Name="Sold" Caption="Sold Units" Type="SummaryTypes.Sum"></PivotViewValue>
            <PivotViewValue Name="Amount" Caption="Total Amount" Type="SummaryTypes.Sum"></PivotViewValue>
        </PivotViewValues>
        <PivotViewFilters>
            <PivotViewFilter Name="Products"></PivotViewFilter>
        </PivotViewFilters>
        <PivotViewFormatSettings>
            <PivotViewFormatSetting Name="Amount" Format="C"></PivotViewFormatSetting>
        </PivotViewFormatSettings>
    </PivotViewDataSourceSettings>
</SfPivotView>

@code {

    public ObservableCollection<ProductDetails> products { get; set; }
    private Timer timer;
    private static Random rand = new Random(42);
    private Timer Timer;

    SfGrid<ProductDetails> Grid { get; set; }

    public void update()
    {
        foreach (var product in products)
        {
            product.Sold = rand.Next(10000);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.products = ProductDetails.GetProductData();

        Timer = new System.Threading.Timer((object? sender) =>
        {
            InvokeAsync(async () =>
       {
           // Add your update logic here
           RefreshData(null);
           // Update the UI
           StateHasChanged();
       });
        }, null, 0, 5_000);

    }

    public void RefreshData(object? state)
    {
        foreach (var product in products)
        {
            product.Sold = rand.Next(1_000);
            product.Amount = rand.Next(1_000);
        }
    }

    public class ProductDetails : INotifyPropertyChanged
    {
        private int _sold;

        public int Sold
        {
            get => _sold;
            set
            {
                _sold = value;
                NotifyPropertyChanged(nameof(Sold));
            }
        }

        //public int Sold { get; set; }

        public double Amount { get; set; }
        public string Country { get; set; }
        public string Product { get; set; }
        public string Year { get; set; }
        public string Quarter { get; set; }

        public static string[] Countries = new string[] { "France", "Germany", "United States" };
        public static string[] Prds = new string[] { "Mountain Bikes", "Road Bikes" };
        public static string[] Yrs = new string[] { "FY 2015", "FY 2016", "FY 2017" };
        public static string[] Qters = new string[] { "Q1", "Q2", "Q3", "Q4" };
        private static int _nbProducts = 200_000;


        public static ObservableCollection<ProductDetails> GetProductData()
        {
            var productData = new ObservableCollection<ProductDetails>();

            for (int i = 0; i < _nbProducts; i++)
            {
                productData.Add(new ProductDetails
                    {
                        Sold = rand.Next(100),
                        Amount = rand.Next(100),
                        Country = Countries[rand.Next(0, 2)],
                        Product = Prds[rand.Next(0, 2)],
                        Year = Yrs[rand.Next(0, 2)],
                        Quarter = Qters[rand.Next(0, 3)],
                    });
            }
            return productData;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
                //Debug.WriteLine($"{propertyName}");
            }
        }
    }
}
