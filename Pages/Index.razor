@page "/"

@using System.Threading
@using System.Collections.ObjectModel
@using System.Diagnostics

@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.Buttons

<SfButton Content="Update" OnClick="() => UpdateData()"></SfButton>
<SfButton CssClass="e-flat" IsPrimary="true" IconCss="@IconCss" Content="@Content" IsToggle="true" @onclick="OnToggleClick" @ref="ToggleBtnObj"></SfButton>

<SfPivotView @ref="PivotTable" TValue="ProductDetails" Height="560" Width="1200" ShowGroupingBar="true" ShowFieldList="true" AllowDeferLayoutUpdate="true">
    <PivotViewDataSourceSettings DataSource="@Data">
        <PivotViewColumns>
            <PivotViewColumn Name="Year"></PivotViewColumn>
            <PivotViewColumn Name="Quarter"></PivotViewColumn>
        </PivotViewColumns>
        <PivotViewRows>
            <PivotViewRow Name="Country"></PivotViewRow>
            @*<PivotViewRow Name="Product"></PivotViewRow>*@
        </PivotViewRows>
        <PivotViewValues>
            <PivotViewValue Name="Sold" Caption="Sold Units" Type="SummaryTypes.Sum"></PivotViewValue>
            <PivotViewValue Name="Amount" Caption="Total Amount" Type="SummaryTypes.Sum"></PivotViewValue>
        </PivotViewValues>
        <PivotViewFilters>
            <PivotViewFilter Name="Products"></PivotViewFilter>
        </PivotViewFilters>
        <PivotViewFormatSettings>
            <PivotViewFormatSetting Name="Amount" Format="C"></PivotViewFormatSetting>
        </PivotViewFormatSettings>
    </PivotViewDataSourceSettings>
</SfPivotView>

@code {
    SfButton ToggleBtnObj;
    public string IconCss = "e-icons e-pause";
    public string Content = "Pause";

    public ObservableCollection<ProductDetails> Data { get; set; }

    private static readonly Random Rand = new Random(42);

    private int _refreshPeriodMs = 5_000;
    
    SfPivotView<ProductDetails> PivotTable { get; set; }
    
    private const int InitCount = 200_000;
    private readonly object _syncRoot = new object();

    private static bool _paused;
    private System.Threading.Timer _timer;

    private bool registered;

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine($"index page {GetHashCode()}");

        await base.OnInitializedAsync();
        this.Data = new ObservableCollection<ProductDetails>(PollingService.Instance.Cache);

        if (!registered)
        {
            PollingService.Instance.UnRegisterAll();
            PollingService.Instance.Register(GetHashCode(), UpdateData);
            registered = true;
        }
    }

    public void UpdateData()
    {
        InvokeAsync(() =>
        {
            Data = new ObservableCollection<ProductDetails>(PollingService.Instance.Cache);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");
    }
    
    public void OnToggleClick()
    {
        lock (_syncRoot)
        {
            if (!_paused)
            {
                this.Content = "Play";
                this.IconCss = "e-icons e-play";
                PollingService.Instance.Pause();
                Debug.WriteLine("paused");
            }
            else
            {
                this.Content = "Pause";
                this.IconCss = "e-icons e-pause";
                PollingService.Instance.Resume();
                Debug.WriteLine("restarted");
            }

            _paused = !_paused;
            Debug.WriteLine($"new paused = {_paused}");
        }
    }

}

